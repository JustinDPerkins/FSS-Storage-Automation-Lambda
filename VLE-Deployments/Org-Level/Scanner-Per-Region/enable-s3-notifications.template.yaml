AWSTemplateFormatVersion: '2010-09-09'
Description: Enable EventBridge Notifications on S3 Resources for FSS
Resources:
  EnableEventBridgeNotificationsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EnableEventBridgeNotificationsLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EnableS3EventBridgeNotificationsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'

  EnableEventBridgeNotificationsLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: EnableEventBridgeNotificationsLambda
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def enable_eventbridge_notifications(event, context):
              s3_client = boto3.client('s3')
              s3_resource = boto3.resource('s3')

              # Retrieve all bucket names in the AWS account
              bucket_names = [bucket.name for bucket in s3_resource.buckets.all()]

              for bucket_name in bucket_names:
                  notification_configuration = {
                      'EventBridgeConfiguration': {}
                  }

                  try:
                      s3_client.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_configuration
                      )
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
                      return

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
        
          def lambda_handler(event, context):
              print('Received event:', event)
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      enable_eventbridge_notifications(event, context)
                      return
                  elif event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Invalid request type'})
              except Exception as e:
                  print('Exception:', str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

      Role: !GetAtt EnableEventBridgeNotificationsLambdaRole.Arn

  EnableEventBridgeNotificationsCustomResource:
    Type: 'Custom::EnableEventBridgeNotifications'
    Properties:
      ServiceToken: !GetAtt EnableEventBridgeNotificationsLambda.Arn
      RoleArn: !GetAtt EnableEventBridgeNotificationsLambdaRole.Arn

Outputs:
  CustomResourceOutput:
    Value: !Ref EnableEventBridgeNotificationsCustomResource
