AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: Trend Micro File Storage Security scanner stack

Metadata:
  AWS::ServerlessRepo::Application:
    Name: cloudone-filestorage-plugin-trigger-full-scheduled-scan-account-deployment
    Description: It deploys all the required resources to trigger a full scan, scheduled or not, on a S3 bucket leveraging an existing Trend Cloud One File Storage Security Account Deployment.
    Author: Trend Cloud One File Storage Security
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ../../LICENSE
    ReadmeUrl: README.md
    Labels: ['trendmicro','cloudone','filestorage','s3','bucket','plugin','full','full-scan','scheduled','scheduled-scan']
    HomePageUrl: https://github.com/trendmicro/cloudone-filestorage-plugins
    SemanticVersion: 2.0.0
    SourceCodeUrl: https://github.com/trendmicro/cloudone-filestorage-plugins/tree/master/scan-triggers/aws-python-bucket-full-and-scheduled-scan-account-deployment
  
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "[ Optional: Resource prefixes ] Warning: Do not modify these fields when you update the stack. This may cause management problems. The maximum prefix length is 50 characters."
        Parameters:
          - SQSQueuePrefix
      - Label:
          default: "[ Customizable section ]"
        Parameters:
          - Schedule
          - ScanResultTopicArn
    
    ParameterLabels:
      SQSQueuePrefix:
        default: Prefix for SQS queue name
      Schedule:
        default: Set a schedule for full scan.
      ScanResultTopicArn:
        default: ARN of ScanResultTopic topic.

Parameters:
  ScanResultTopicArn:
    Type: String
    Description: ARN of ScanResultTopic topic. Something like arn:aws:sns:us-east-1:123456789012:All-in-one-TM-FileStorageSecurity-StorageStack-1E00QCLBZW7M4-ScanResultTopic-1W7RZ7PBZZUJO
  ScannerLambdaArn:
    Type: String
    Description: ARN of the scanner lambda function. Something like arn:aws:lambda:us-east-1:123456789012:function:Account-Scanner-TM-FileStorageSecuri-ScannerLambda-p9ACFABPDs8Q
  Schedule:
    Type: String
    Default: ""
    Description: "Set a schedule for full scan. If empty, there will not be a scheduled scan. Defaults to empty. More info at: https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-expressions.html"
  SQSQueuePrefix:
    AllowedPattern: ^$|^[a-zA-Z0-9_\-]+-$
    ConstraintDescription: Prefix for SQS queue name can be empty or include alphanumeric characters, hyphens (-), and underscores (_) and must end with a hyphen. The maximum length is 50 characters.
    Default: ''
    Description: Prefix for the name of SQS queues being deployed. Must end with a hyphen (-).
    Type: String
    MaxLength: 50
  IncludedBuckets:
    Type: CommaDelimitedList
    Description: Comma separated list of buckets to be included in the scan. If empty, all buckets will be scanned and make sure to exclude any quarantine buckets from the scan to avoid infinite loops. If not empty, 'ExcludeBuckets' will be ignored.
  ExcludedBuckets:
    Type: CommaDelimitedList
    Description: Comma separated list of buckets to be excluded from the scan. If empty, no buckets will be excluded from the scan.
  
Conditions:
  SetSchedule:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: Schedule
  HasSQSQueuePrefix:
    !Not [!Equals ['', !Ref SQSQueuePrefix]]

Resources:
  ScannerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If
        - HasSQSQueuePrefix
        - !Join ['', [!Ref SQSQueuePrefix, 'ScannerQueue-', !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        - !Ref AWS::NoValue
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 3600
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 720
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ScannerDLQ.Arn
        maxReceiveCount: 2
  ScannerQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: send_message_from_accounts
            Effect: Allow
            Principal: !Ref AWS::NoValue
            Action:
              - sqs:SendMessage
            Resource: !GetAtt ScannerQueue.Arn
      Queues:
        - !Ref ScannerQueue
  ScannerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If
        - HasSQSQueuePrefix
        - !Join ['', [!Ref SQSQueuePrefix, 'ScannerDLQ-', !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        - !Ref AWS::NoValue
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 3600
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 720

  ScannerEventSourceFromScannerQueue:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ScannerQueue.Arn
      FunctionName: !Ref ScannerLambdaArn

  StateBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  PaginatorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PaginatorExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:ListBucket
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - StateBucket
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - StateBucket
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: PaginatorExecutionRoleDefaultPolicy
      Roles:
        - Ref: PaginatorExecutionRole
  PaginatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
          const https = require('https');

          const STATE_BUCKET = process.env.STATE_BUCKET;
          let s3;

          exports.lambda_handler = async (event) => {
            console.log(event);
            const bucket = event.bucket;
            const KEY_WITH_KEYS_TO_SCAN = bucket;
            // let region='';
            
            // https.request(`https://${bucket}.s3.amazonaws.com`, { method: 'HEAD' }, (response) => {
            //   console.log(response);
            //   region = response.headers['x-amz-bucket-region'];
            // });
            // console.log(region);
            // s3 = new AWS.S3({region: region});
            s3 = new AWS.S3();
            const allKeys = await getAllKeys(bucket);
            console.log(allKeys);
            const writeResult = await writeToBucket(allKeys, KEY_WITH_KEYS_TO_SCAN, STATE_BUCKET);
            console.log(writeResult);

            return {
              bucket: bucket,
              stateBucket: STATE_BUCKET,
              stateKey: KEY_WITH_KEYS_TO_SCAN,
              limit: 500
            }
          };

          const getKeysInPage = async (bucket, continuationToken) => {
            const params = {
              Bucket: bucket,
              ContinuationToken: continuationToken? continuationToken : null
            };
            const response = await s3.listObjectsV2(params).promise();
            console.log(response);
            return {
              keys: response.Contents.map(object => object.Key),
              nextContinuationToken: response.NextContinuationToken
            };
          };

          const getAllKeys = async (bucket) => {
            let {keys, nextContinuationToken} = await getKeysInPage(bucket);
            while (nextContinuationToken){
              const result = await getKeysInPage(bucket, nextContinuationToken);
              console.log(result);
              keys.push(...result.keys);
              nextContinuationToken = result.nextContinuationToken? result.nextContinuationToken : null;
            }
            return keys;
          };

          const writeToBucket = async (content, key, bucket) => {
            try {
              const stringfiedContent = JSON.stringify(content);
              console.log(stringfiedContent);
              const params = {
                Bucket: bucket,
                Key: key,
                // ContentType:'binary',
                ContentType: "text/plain",
                // Body: Buffer.from(JSON.stringify(content))
                Body: Buffer.from(stringfiedContent)
              };
              console.log(params);
              const result = await s3.putObject(params).promise();
              return result;
            } catch (error) {
              console.error(error);
              return error;
            }
          };
      Role:
        Fn::GetAtt:
          - PaginatorExecutionRole
          - Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          STATE_BUCKET:
            Ref: StateBucket
      Handler: index.lambda_handler
      MemorySize: 1024
      Runtime: nodejs16.x
      Timeout: 900
    DependsOn:
      - PaginatorExecutionRoleDefaultPolicy
      - PaginatorExecutionRole
  FilterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FilterExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - StateBucket
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - StateBucket
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: FilterExecutionRoleDefaultPolicy
      Roles:
        - Ref: FilterExecutionRole
  FilterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();

          const fetchKeys = async (bucket, key) => {
              try {
                  const params = {
                      Bucket: bucket,
                      Key: key
                  };
                  const result = await s3.getObject(params).promise();
                  const keys = JSON.parse(result.Body.toString('utf-8'));
                  return keys;
              } catch (error) {
                  throw error;
              }
          };

          const writeToBucket = async (content, key, bucket) => {
              try {
                const params = {
                  Bucket: bucket,
                  Key: key,
                  ContentType:'binary',
                  Body: Buffer.from(JSON.stringify(content))
                };
                const result = await s3.putObject(params).promise();
                return result;
              } catch (error) {
                return error;
              }
          };

          const filterKeys = (keys, limit) => {
              const keysToScan = keys.slice(0, limit);
              const remainingKeys = keys.slice(limit);
              return {
                  keysToScan,
                  remainingKeys
              };
          };

          exports.lambda_handler = async (event) => {
              console.log(event);
              const stateBucket = event.stateBucket;
              const stateKey = event.stateKey;
              const scanLimitPerIteration = event.limit;
              const bucket = event.bucket;
              const allKeys = await fetchKeys(stateBucket, stateKey);

              const filtered = filterKeys(allKeys, scanLimitPerIteration);

              // Rewrite file in bucket with remaining keys
              if (filtered.remainingKeys){
                  await writeToBucket(filtered.remainingKeys, stateKey, stateBucket);
              }

              const response = {
                  keys: filtered.keysToScan,
                  bucket: bucket,
                  limit: scanLimitPerIteration,
                  remainingKeysLength: filtered.remainingKeys? filtered.remainingKeys.length : null,
                  stateBucket: event.stateBucket,
                  stateKey: event.stateKey
              };

              return response;
          };
      Role:
        Fn::GetAtt:
          - FilterExecutionRole
          - Arn
      Architectures:
        - arm64
      Handler: index.lambda_handler
      MemorySize: 512
      Runtime: nodejs16.x
      Timeout: 900
    DependsOn:
      - FilterExecutionRoleDefaultPolicy
      - FilterExecutionRole
  ScanOneObjectExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ScanOneObjectExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObjectTagging
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":s3:::"
                  - "*"
                  - /*
          - Action: sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt ScannerQueue.Arn
        Version: "2012-10-17"
      PolicyName: ScanOneObjectExecutionRoleDefaultPolicy
      Roles:
        - Ref: ScanOneObjectExecutionRole
  ScanOneObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          # Copyright (C) 2021 Trend Micro Inc. All rights reserved.

          import json
          import os
          import logging
          import boto3
          import botocore
          from botocore.config import Config
          from botocore.exceptions import ClientError
          import urllib.parse
          import uuid
          import datetime
          import http.client

          sqs_url = os.environ['SQSUrl']
          print('scanner queue URL: ' + sqs_url)
          sqs_region = sqs_url.split('.')[1]
          print('scanner queue region: ' + sqs_region)
          sqs_endpoint_url = 'https://sqs.{0}.amazonaws.com'.format(sqs_region)
          print('scanner queue endpoint URL: ' + sqs_endpoint_url)
          report_object_key = 'True' == os.environ.get('REPORT_OBJECT_KEY', 'False')
          print(f'report object key: {report_object_key}')

          region = boto3.session.Session().region_name
          s3_client_path = boto3.client('s3', region, config=Config(s3={'addressing_style': 'path'}, signature_version='s3v4'))
          s3_client_virtual = boto3.client('s3', region, config=Config(s3={'addressing_style': 'virtual'}, signature_version='s3v4'))

          def create_presigned_url(bucket_name, bucket_region, object_name, expiration):
              """Generate a presigned URL to share an S3 object
              :param bucket_name: string
              :param object_name: string
              :param expiration: Time in seconds for the presigned URL to remain valid
              :return: Presigned URL as string. If error, returns None.
              """

              try:
                  s3_endpoint_url = f'https://s3.{bucket_region}.amazonaws.com'
                  s3_addressing_style = 'path' if '.' in bucket_name else 'virtual'
                  s3_client = boto3.client('s3', bucket_region, config=Config(s3={'addressing_style': s3_addressing_style}, signature_version='s3v4'), endpoint_url=s3_endpoint_url)
                  response = s3_client.generate_presigned_url(
                      'get_object',
                      Params={
                          'Bucket': bucket_name,
                          'Key': object_name
                      },
                      ExpiresIn=expiration
                  )
              except ClientError as ex:
                  error_message = str(ex)
                  print(f'failed to generate pre-signed URL: {error_message}')
                  return None, error_message

              # The response contains the presigned URL which is sensitive data
              return response


          def push_to_sqs(bucket_name, object_name, amz_request_id, presigned_url, event_time):
              object = {
                  'S3': {
                      'bucket': bucket_name,
                      'object': object_name,
                      'amzRequestID': amz_request_id,
                  },
                  'ScanID': str(uuid.uuid4()),
                  'SNS' : os.environ['SNSArn'],
                  'URL': presigned_url,
                  'ModTime': event_time,
                  'ReportObjectKey': report_object_key
              }
              try:
                  session = boto3.session.Session(region_name=sqs_region)
                  sqs = session.resource(service_name='sqs', endpoint_url=sqs_endpoint_url)
                  queue = sqs.Queue(url=sqs_url)
                  response = queue.send_message(MessageBody=json.dumps(object))
                  return response
              except ClientError as e:
                  print('failed to push SQS message: ' + str(e))
                  return None

          def is_folder(key):
              return key.endswith('/')

          def handle_step_functions_event(bucket, key):
              key = urllib.parse.unquote_plus(key)
              amz_request_id = "f"
              event_time = datetime.datetime.utcnow().isoformat() # ISO-8601 format, 1970-01-01T00:00:00.000Z, when Amazon S3 finished processing the request

              if is_folder(key):
                  print('Skip scanning for folder.')
                  return
              
              bucket_region = get_bucket_region(bucket)
              presigned_url = create_presigned_url(
                  bucket,
                  bucket_region,
                  key,
                  expiration = 60 * 60 # in seconds
              )
              print(f'AMZ request ID: {amz_request_id}, event time: {event_time}, URL:', presigned_url.split('?')[0])
              sqs_response = push_to_sqs(bucket, key, amz_request_id, presigned_url, event_time)
              print(sqs_response)

          def lambda_handler(event, context):

              bucket = event['bucket']
              key = event['key']
              handle_step_functions_event(bucket, key)
              
          def get_bucket_region(bucket):
              conn = http.client.HTTPSConnection(f"{bucket}.s3.amazonaws.com")
              conn.request("HEAD", "/")
              response = conn.getresponse()
              region = response.getheader("x-amz-bucket-region")
              conn.close()
              return region

      Role:
        Fn::GetAtt:
          - ScanOneObjectExecutionRole
          - Arn
      Environment:
        Variables:
          SNSArn:
            Ref: ScanResultTopicArn
          SQSUrl:
            Ref: ScannerQueue 
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.9
      Timeout: 60
    DependsOn:
      - ScanOneObjectExecutionRoleDefaultPolicy
      - ScanOneObjectExecutionRole
  
  ListBucketsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
  ListBucketsExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:ListAllMyBuckets
            Effect: Allow
            Resource: "*"
          - Action: states:StartExecution
            Effect: Allow
            Resource: !GetAtt FullScanStarterLoopStepFunction.Arn
        Version: "2012-10-17"
      PolicyName: ListBucketsExecutionRoleDefaultPolicy
      Roles:
        - Ref: ListBucketsExecutionRole
  ListBucketsStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - ListBucketsExecutionRole
          - Arn
      DefinitionString: !Sub |
        {
          "Comment": "List all (selected) buckets, excludes the excluded ones and start a scan for each one of them",
          "StartAt": "Is there a list of buckets to scan?",
          "States": {
            "Is there a list of buckets to scan?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Buckets",
                  "IsPresent": true,
                  "Next": "For Each Bucket Name",
                  "Comment": "There is a list of buckets to scan"
                }
              ],
              "Default": "List all Buckets",
              "Comment": "If there is, it will prepare the array to look like the result of the API Call to list buckets. If there isn't, it will make said call."
            },
            "For Each Bucket Name": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Transform it to the expected format",
                "States": {
                  "Transform it to the expected format": {
                    "Type": "Pass",
                    "Parameters": {
                      "CreationDate": "",
                      "Name.$": "$"
                    },
                    "End": true
                  }
                }
              },
              "Next": "Is there a Exclude List?",
              "ItemsPath": "$.Buckets",
              "ResultPath": "$.Buckets"
            },
            "Is there a Exclude List?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Excluded",
                  "IsPresent": true,
                  "Comment": "There is a exclusion list",
                  "Next": "Tag Excluded Buckets"
                }
              ],
              "Default": "Add \"Excluded\" Array",
              "Comment": "If there is, nothing happens. If there isn't, one is added in order to not break the code downstream."
            },
            "Add \"Excluded\" Array": {
              "Type": "Pass",
              "Next": "Tag Excluded Buckets",
              "Comment": "Add \"Excluded\" array to object so the following map doesn't fail ",
              "Result": [],
              "ResultPath": "$.Excluded"
            },
            "Tag Excluded Buckets": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Pass",
                "States": {
                  "Pass": {
                    "Type": "Pass",
                    "End": true,
                    "Comment": "Nothing happens here."
                  }
                }
              },
              "Next": "For Each Bucket",
              "ItemsPath": "$.Buckets",
              "ItemSelector": {
                "CreationDate": "",
                "Name.$": "$$.Map.Item.Value.Name",
                "Excluded.$": "States.ArrayContains($.Excluded, $$.Map.Item.Value.Name)"
              }
            },
            "List all Buckets": {
              "Type": "Task",
              "Parameters": {},
              "Resource": "arn:aws:states:::aws-sdk:s3:listBuckets",
              "Next": "Massage Payload :)",
              "ResultPath": "$.Buckets"
            },
            "Massage Payload :)": {
              "Type": "Pass",
              "Next": "Is there a Exclude List?",
              "Parameters": {
                "Excluded.$": "$.Excluded",
                "Buckets.$": "$.Buckets.Buckets"
              }
            },
            "For Each Bucket": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Is Bucket excluded?",
                "States": {
                  "Is Bucket excluded?": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Excluded",
                        "BooleanEquals": true,
                        "Comment": "Bucket is excluded",
                        "Next": "Do nothing"
                      }
                    ],
                    "Default": "Step Functions StartExecution"
                  },
                  "Do nothing": {
                    "Type": "Pass",
                    "End": true
                  },
                  "Step Functions StartExecution": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::states:startExecution",
                    "Parameters": {
                      "StateMachineArn": "${FullScanStarterLoopStepFunction.Arn}",
                      "Input": {
                        "bucket.$": "$.Name",
                        "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                      }
                    },
                    "End": true
                  }
                }
              },
              "End": true
            }
          }
        }           

  
  ScanStarterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
  ScanStarterExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - FilterFunction
                  - Arn
              - Fn::GetAtt:
                  - ScanOneObjectFunction
                  - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ScannerLoopStepFunction
                - Arn
        Version: "2012-10-17"
      PolicyName: ScanStarterExecutionRoleDefaultPolicy
      Roles:
        - Ref: ScanStarterExecutionRole
  ScannerLoopStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - ScanStarterExecutionRole
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - |-2

                    {
                      "Comment": "A machine that loops trough all files a bucket to scan them with File Storage Security.",
                      "StartAt": "Filter first 1000 keys to scan",
                      "States": {
                        "Filter first 1000 keys to scan": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "OutputPath": "$.Payload",
                          "Parameters": {
                            "Payload.$": "$",
                            "FunctionName": "
            - Fn::GetAtt:
                - FilterFunction
                - Arn
            - |-
              "
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException"
                              ],
                              "IntervalSeconds": 2,
                              "MaxAttempts": 6,
                              "BackoffRate": 2
                            }
                          ],
                          "Next": "Parallel"
                        },
                        "Parallel": {
                          "Type": "Parallel",
                          "Branches": [
                            {
                              "StartAt": "Map",
                              "States": {
                                "Map": {
                                  "Type": "Map",
                                  "End": true,
                                  "Parameters": {
                                    "key.$": "$$.Map.Item.Value",
                                    "bucket.$": "$.bucket"
                                  },
                                  "Iterator": {
                                    "StartAt": "Scan a Object",
                                    "States": {
                                      "Scan a Object": {
                                        "Type": "Task",
                                        "Resource": "arn:aws:states:::lambda:invoke",
                                        "OutputPath": "$.Payload",
                                        "Parameters": {
                                          "Payload.$": "$",
                                          "FunctionName": "
            - Fn::GetAtt:
                - ScanOneObjectFunction
                - Arn
            - |-
              "
                                        },
                                        "Retry": [
                                          {
                                            "ErrorEquals": [
                                              "Lambda.ServiceException",
                                              "Lambda.AWSLambdaException",
                                              "Lambda.SdkClientException"
                                            ],
                                            "IntervalSeconds": 2,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 2
                                          }
                                        ],
                                        "End": true
                                      }
                                    }
                                  },
                                  "ItemsPath": "$.keys",
                                  "MaxConcurrency": 1
                                }
                              }
                            },
                            {
                              "StartAt": "Are there keys left?",
                              "States": {
                                "Are there keys left?": {
                                  "Type": "Choice",
                                  "Choices": [
                                    {
                                      "Variable": "$.remainingKeysLength",
                                      "NumericGreaterThan": 0,
                                      "Comment": "Yes",
                                      "Next": "Re-execute with the remaining keys."
                                    }
                                  ],
                                  "Default": "Pass"
                                },
                                "Re-execute with the remaining keys.": {
                                  "Type": "Task",
                                  "Resource": "arn:aws:states:::states:startExecution",
                                  "Parameters": {
                                    "StateMachineArn": "arn:
            - Ref: AWS::Partition
            - ":states:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":stateMachine:ScannerLoopStateMachine\",

              \                      \"Input\": {

              \                        \"stateBucket.$\": \"$.stateBucket\",

              \                        \"stateKey.$\": \"$.stateKey\",

              \                        \"limit.$\": \"$.limit\",

              \                        \"bucket.$\": \"$.bucket\",

              \                        \"AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$\": \"$$.Execution.Id\"

              \                      }

              \                    },

              \                    \"End\": true

              \                  },

              \                  \"Pass\": {

              \                    \"Type\": \"Pass\",

              \                    \"End\": true,

              \                    \"Result\": {}

              \                  }

              \                }

              \              }

              \            ],

              \            \"End\": true

              \          }

              \        }

              \      }

              \      "
      StateMachineName: ScannerLoopStateMachine
  FullScanStarterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
  FullScanStarterExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - PaginatorFunction
                - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ScannerLoopStepFunction
                - Arn
        Version: "2012-10-17"
      PolicyName: FullScanStarterExecutionRoleDefaultPolicy
      Roles:
        - Ref: FullScanStarterExecutionRole
  FullScanStarterLoopStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - FullScanStarterExecutionRole
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - |-2

                    {
                      "Comment": "Kicks of a Full Scan using File Storage Security.",
                      "StartAt": "List all keys in bucket",
                      "States": {
                        "List all keys in bucket": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "OutputPath": "$.Payload",
                          "Parameters": {
                            "FunctionName": "
            - Fn::GetAtt:
                - PaginatorFunction
                - Arn
            - |-
              ",
                            "Payload.$": "$"
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException"
                              ],
                              "IntervalSeconds": 2,
                              "MaxAttempts": 6,
                              "BackoffRate": 2
                            }
                          ],
                          "Next": "Start Scanner Flow"
                        },
                        "Start Scanner Flow": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::states:startExecution",
                          "Parameters": {
                            "StateMachineArn": "
            - Fn::GetAtt:
                - ScannerLoopStepFunction
                - Arn
            - "\",

              \              \"Input\": {

              \                \"stateKey.$\": \"$.stateKey\",

              \                \"bucket.$\": \"$.bucket\",

              \                \"stateBucket.$\": \"$.stateBucket\",

              \                \"limit.$\": \"$.limit\",

              \                \"AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$\": \"$$.Execution.Id\"

              \              }

              \            },

              \            \"End\": true

              \          }

              \        }

              \      }

              \      "
      StateMachineName: fullScanStarterStateMachine
    DependsOn:
      - FullScanStarterExecutionRoleDefaultPolicy
      - FullScanStarterExecutionRole
  FullScanStarterLoopStepFunctionEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
  FullScanStarterLoopStepFunctionEventsRoleDefaultPolicy822C2937:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: ListBucketsStepFunction
        Version: "2012-10-17"
      PolicyName: FullScanStarterLoopStepFunctionEventsRoleDefaultPolicy822C2937
      Roles:
        - Ref: FullScanStarterLoopStepFunctionEventsRole
  ScanOnSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression:
        Ref: Schedule
      State: ENABLED
      Targets:
        - Arn:
            Ref: ListBucketsStepFunction
          Id: Target0
          RoleArn:
            Fn::GetAtt:
              - FullScanStarterLoopStepFunctionEventsRole
              - Arn
          Input: !Join
            - ""
            - - !Sub
                - '{"Buckets": ["${inner}"], '
                - inner: !Join
                  - '","'
                  - Ref: "IncludedBuckets"
              - !Sub
                - '"Excluded": ["${inner}"]}'
                - inner: !Join
                  - '","'
                  - Ref: "ExcludedBuckets"
    Condition: SetSchedule
Outputs:
  StartExecutionHere:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/states/home?region=${AWS::Region}#/stateMachines/view/${ListBucketsStepFunction}"
