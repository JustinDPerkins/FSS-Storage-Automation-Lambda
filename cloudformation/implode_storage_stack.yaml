AWSTemplateFormatVersion: 2010-09-09
Description: "Automatically implode File Storage Security - Storage stack to every S3 bucket delete event"
Metadata:
  License: MIT-License
  Version: 1.2
Resources:
  wsapi:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: C1 WS API KEY
      SecretString: !Sub '{"wsapikey":"${C1WSAPI}"}'
  lambdarole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Ref AWS::StackName
  lambdarolepolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Ref lambdarole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogGroups"
              - "logs:DeleteLogGroup"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:PutRetentionPolicy"
              - "iam:DeletePolicy"
              - "iam:PassRole"
              - "iam:DetachRolePolicy"
              - "iam:GetRole"
              - "iam:GetRolePolicy"
              - "iam:DeleteRole"
              - "iam:DeleteRolePolicy"
              - "sns:Unsubscribe"
              - "sns:SetTopicAttributes"
              - "sns:GetTopicAttributes"
              - "sns:RemovePermission"
              - "sns:DeleteTopic"
              - "cloudformation:ListExports"
              - "cloudformation:ListStackInstances"
              - "cloudformation:DescribeStackResource"
              - "cloudformation:ListStackResources"
              - "cloudformation:DescribeStackEvents"
              - "cloudformation:DescribeStackInstance"
              - "cloudformation:GetTemplateSummary"
              - "cloudformation:DescribeStacks"
              - "cloudformation:GetTemplate"
              - "cloudformation:DeleteStack"
              - "cloudformation:ListStacks"
              - "sqs:ListQueues"
              - "sqs:GetQueueUrl"
              - "sqs:ListQueueTags"
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:RemovePermission"
              - "sqs:GetQueueAttributes"
              - "sqs:ListDeadLetterSourceQueues"
              - "sqs:DeleteQueue"
              - "s3:*"
              - "secretsmanager:GetSecretValue"
              - "lambda:DeleteFunction"
              - "lambda:InvokeFunction"
              - "lambda:GetEventSourceMapping"
              - "lambda:GetFunction"
              - "lambda:RemovePermission"
              - "sts:AssumeRole"

            Resource: "*"
      Roles:
        - !Ref lambdarole
  implodestoragelambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 120
      Handler: index.lambda_handler
      Role: !GetAtt
        - lambdarole
        - Arn
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import boto3
          import urllib3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          logger.info("Logging setup Complete")

          fss_key = os.environ["WS_API"]
          get_url = "https://cloudone.trendmicro.com/api/filestorage/external-id"
          post_url = "https://cloudone.trendmicro.com/api/filestorage/stacks"
          delete_url = "https://cloudone.trendmicro.com/api/filestorage/stacks/"

          def lambda_handler(event, context):
              # get secret
              secrets = boto3.client('secretsmanager').get_secret_value(SecretId=fss_key)
              sm_data = json.loads(secrets["SecretString"])
              ws_key = sm_data["wsapikey"]

              #gather bucket name from event
              bucket_name = event['detail']['requestParameters']['bucketName']
              logger.info("s3 Bucket: " + bucket_name)
              
              # gather cloud one ext id
              r = http.request(
                  "GET",
                  get_url,
                  headers={
                      "Content-Type": "application/json",
                      "api-secret-key": ws_key,
                      "Api-Version": "v1",
                    },
                )
              ext = json.loads(r.data.decode("utf-8"))
              ext_id = ext["externalID"]
              logger.info("CloudOne ExtID: " + ext_id)
              
              # gather aws account ID
              account_id = event["account"]
              logger.info("AWS account ID: " + account_id)

              #gather stack id
              id_call = http.request('GET', post_url, headers = {'Content-Type': 'application/json', 'api-secret-key': ws_key, 'Api-Version': 'v1'})
              id_resp = json.loads(id_call.data.decode('utf-8'))
              for data in id_resp['stacks']:
                  if 'storage' in data and data['storage'] is not None:
                      if bucket_name == data['storage']:
                          stack_name = data['name']
                          stack_id = data['stackID']
                          logger.info(stack_name)
                          logger.info(stack_id)
                          stack_removal(ws_key, stack_id,stack_name)
                          
          def stack_removal(ws_key, stack_id, stack_name):
              #delete cft stack
              cft_client = boto3.client("cloudformation")
              response = cft_client.delete_stack(StackName=stack_name)
              #delete stack from c1-fss
              id_call = http.request('DELETE', delete_url+stack_id, headers = {'Content-Type': 'application/json', 'api-secret-key': ws_key, 'Api-Version': 'v1'})

      MemorySize: 128
      Environment:
        Variables:
          WS_API: !Ref wsapi
  eventbridgeevent:
    Type: AWS::Events::Rule
    Properties:
      State: "ENABLED"
      EventPattern:
        source:
          - aws.s3
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - DeleteBucket
      Targets:
        - Arn: !GetAtt
            - implodestoragelambda
            - Arn
          Id: latest
  invokestorage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt implodestoragelambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - eventbridgeevent
        - Arn
Parameters:
  C1WSAPI:
    Type: String
    NoEcho: true
    Description: Enter your Cloud One Workload Security API Key

    