AWSTemplateFormatVersion: 2010-09-09
Description: "Automatically deploy File Storage Security - Storage stack to every new S3 bucket created and register it to the defined Scanner Stack.  "
Metadata:
  License: MIT-License
  Version: 1.2
Resources:
  lambdarole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: !Ref AWS::StackName
  lambdarolepolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref lambdarole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:CreateFunction"
              - "sqs:DeleteMessage"
              - "cloudformation:ListExports"
              - "cloudformation:ListStackInstances"
              - "sqs:ReceiveMessage"
              - "iam:CreateRole"
              - "s3:CreateBucket"
              - "lambda:GetFunctionConfiguration"
              - "cloudformation:DescribeStackResource"
              - "iam:AttachRolePolicy"
              - "iam:PutRolePolicy"
              - "cloudformation:DescribeStackEvents"
              - "iam:DetachRolePolicy"
              - "lambda:DeleteFunction"
              - "sns:Subscribe"
              - "s3:PutObjectTagging"
              - "cloudformation:ListStackResources"
              - "iam:GetRole"
              - "sqs:GetQueueUrl"
              - "lambda:InvokeFunction"
              - "lambda:GetEventSourceMapping"
              - "cloudformation:DescribeStackInstance"
              - "sns:CreateTopic"
              - "sqs:SendMessage"
              - "iam:DeleteRole"
              - "sqs:GetQueueAttributes"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "s3:PutBucketTagging"
              - "cloudformation:DescribeStacks"
              - "s3:PutObject"
              - "s3:GetObject"
              - "sts:AssumeRole"
              - "sqs:AddPermission"
              - "cloudformation:GetTemplate"
              - "iam:GetRolePolicy"
              - "s3:GetBucketTagging"
              - "lambda:GetLayerVersion"
              - "lambda:PublishLayerVersion"
              - "sns:SetTopicAttributes"
              - "s3:ListBucket"
              - "lambda:CreateEventSourceMapping"
              - "sqs:ListQueueTags"
              - "s3:PutEncryptionConfiguration"
              - "iam:PassRole"
              - "sns:Publish"
              - "iam:DeleteRolePolicy"
              - "s3:GetObjectTagging"
              - "sqs:SetQueueAttributes"
              - "cloudformation:ListStacks"
              - "sqs:ListQueues"
              - "sns:GetTopicAttributes"
              - "logs:DescribeLogGroups"
              - "lambda:GetFunction"
              - "cloudformation:GetTemplateSummary"
              - "lambda:AddPermission"
              - "sqs:ListDeadLetterSourceQueues"
              - "s3:ListAllMyBuckets"
              - "cloudformation:CreateStack"
              - "sqs:CreateQueue"
              - "logs:PutRetentionPolicy"
            Resource: "*"
      Roles:
        - !Ref lambdarole
  storagelambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 500
      Handler: index.lambda_handler
      Role: !GetAtt 
        - lambdarole
        - Arn
      Code:
        ZipFile: |
          import logging
          import json
          import urllib3
          import time
          import os
          import boto3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          logger.info("Logging setup Complete")
          fss_key = os.environ['C1_API']
          queue_name = os.environ['SQS_Name']
          stack_id = os.environ['STACK_ID']
          get_url = "https://cloudone.trendmicro.com/api/filestorage/external-id"
          post_url = "https://cloudone.trendmicro.com/api/filestorage/stacks"
          def lambda_handler(event, context):
              #gather bucket name from event
              bucket_name = event['detail']['requestParameters']['bucketName']
              # filter event to bucket name
              substring = "copyzipsdestbucket"
              logger.info("s3 Bucket: " + bucket_name)
              if substring in bucket_name:
                  print('Name matched filter:' + bucket_name)
                  return 0
              else:
                  #gather cloud one ext id
                  r = http.request('GET', get_url, headers = {'Content-Type': 'application/json', 'api-secret-key': fss_key, 'Api-Version': 'v1'})
                  ext = json.loads(r.data.decode('utf-8'))
                  ext_id = ext['externalID']
                  logger.info("CloudOne ExtID :" + ext_id)
                  #gather aws account ID
                  account_id = event['account']
                  logger.info("AWS account ID: " + account_id)
                  s3_client = boto3.client('s3')
                  #check if encryption exsists on bucket
                  try:
                      response = s3_client.get_bucket_encryption(Bucket=bucket_name)
                      kms_arn= response['ServerSideEncryptionConfiguration']['Rules'][0]['ApplyServerSideEncryptionByDefault']['KMSMasterKeyID']
                      logger.info("Key Arn: " + kms_arn)
                  except ClientError:
                      logger.info("S3 :" + bucket_name + " has no encryption enabled")
                      kms_arn = ''
                  #check bucket tags
                  try:
                      response = s3_client.get_bucket_tagging(Bucket=bucket_name)
                      tags = response['TagSet']
                      tag_status=tags
                  except ClientError:
                      no_tags='does not have tags'
                      tag_status=no_tags
                  if tag_status == 'does not have tags':
                      addTag(s3_client, bucket_name)
                      add_storage(bucket_name, ext_id, account_id, kms_arn)
                  else:
                      for tags in tag_status:
                          if tags['Key'] == "FSSMonitored":
                              if (tags["Value"] == 'No') or (tags["Value"] == 'no') or (tags["Value"] == 'NO'):
                                  #if tag FSSMonitored is no; quit
                                  logger.info("S3 :" + bucket_name + " has tag FSSMonitored == no; aborting")
                                  return 0
                              elif (tags["Value"] != 'yes') or (tags["Value"] != 'Yes') or (tags["Value"] != 'YES'):
                                  addTag(s3_client, bucket_name)
                                  add_storage(bucket_name, ext_id, account_id, kms_arn)
                                  break
                      addTag(s3_client, bucket_name)
          def addTag(s3_client, bucket_name):
              logger.info("Bucket: " + bucket_name + " has no tags; adding")
              response = s3_client.put_bucket_tagging(Bucket=bucket_name,
                          Tagging={
                              'TagSet': [
                                  {
                                      'Key': 'FSSMonitored',
                                      'Value': 'Yes' 
                                  },
                              ]
                          },
                      )
          def add_storage(bucket_name, ext_id, account_id, kms_arn):
              #deploy storage stack
              ExternalID = {'ParameterKey':'ExternalID', 'ParameterValue':ext_id }
              S3BucketToScan = {'ParameterKey':'S3BucketToScan', 'ParameterValue':bucket_name }
              Trigger_with_event = {'ParameterKey':'TriggerWithObjectCreatedEvent', 'ParameterValue':'true' }
              scanner_queue_url = {'ParameterKey':'ScannerSQSURL', 'ParameterValue':queue_name }
              scanner_aws_account = {'ParameterKey':'ScannerAWSAccount', 'ParameterValue':account_id }
              S3_Encryption = {'ParameterKey':'KMSKeyARNForBucketSSE', 'ParameterValue':kms_arn }
              cft_client = boto3.client('cloudformation')
              print('creating stack ..')
              cft_client.create_stack(
                  StackName="C1-FSS-Storage-"+bucket_name,
                  TemplateURL="https://file-storage-security.s3.amazonaws.com/latest/templates/FSS-Storage-Stack.template",
                  Parameters=[ExternalID, S3BucketToScan, scanner_queue_url, Trigger_with_event, scanner_aws_account, S3_Encryption],
                  Capabilities=['CAPABILITY_IAM'],
              )
              cft_waiter = cft_client.get_waiter('stack_create_complete')
              cft_waiter.wait(StackName="C1-FSS-Storage-"+bucket_name)
              res = cft_client.describe_stacks(StackName="C1-FSS-Storage-"+bucket_name)
              storage_stack = res['Stacks'][0]['Outputs'][2]['OutputValue']
              logger.info("FSS StorageRole Arn: " + storage_stack)
              print(storage_stack)
              #add to c1
              payload = {
                  "type": "storage",
                  "scannerStack": stack_id,
                  "provider": "aws",
                  "details": {
                      "managementRole": storage_stack
                  }
              }
              encoded_msg = json.dumps(payload).encode('utf-8')
              resp = http.request('POST', post_url, headers = {'Content-Type': 'application/json', 'api-secret-key': fss_key, 'Api-Version': 'v1'}, body=encoded_msg)
              transform = json.loads(resp.data.decode('utf-8'))
              print(transform)
              logger.info("Storage Stack has deployed")
      MemorySize: 128
      Environment:
        Variables:
          C1_API: !Ref FSSAPI
          SQS_Name: !Ref SQSURL
          STACK_ID: !Ref StackID
  cloudwatchevent:
    Type: AWS::Events::Rule
    Properties:
      State: "ENABLED"
      EventPattern: 
        source:
          - aws.s3
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CreateBucket
      Targets:
        - Arn: !GetAtt
            - storagelambda
            - Arn
          Id: latest
  invokestorage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt storagelambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - cloudwatchevent
        - Arn
Parameters:
  FSSAPI:
    Type: String
    Default: ''
    Description: Enter your Cloud One File Storage API Key
  SQSURL:
    Type: String
    Default: ''
    Description: Enter the Scanner stack SQS URL
  StackID:
    Type: String
    Default: ''
    Description: Enter the Scanner stack ID
